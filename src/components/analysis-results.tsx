"use client";
import type { AnalysisResult } from "@/app/actions";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  TrendingUp,
  Activity,
  Scaling,
  TrendingDown,
  Smile,
  Users,
  Shield,
  Zap,
  ArrowDown,
  ArrowUp,
  Minus,
  HelpCircle,
} from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";
import { Badge } from "@/components/ui/badge";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { AnalysisTable } from "./analysis-table";


interface AnalysisResultsProps {
  analysis: AnalysisResult | null;
  isLoading: boolean;
}

export const scoreIcons: { [key: string]: React.ReactNode } = {
  technicalPatterns: <TrendingUp className="h-4 w-4" />,
  movingAverage: <Activity className="h-4 w-4" />,
  relativeStrength: <Scaling className="h-4 w-4" />,
  shortInterest: <TrendingDown className="h-4 w-4" />,
  sentiment: <Smile className="h-4 w-4" />,
  analystSentiment: <Users className="h-4 w-4" />,
  insiderActivity: <Shield className="h-4 w-4" />,
  earningsCatalyst: <Zap className="h-4 w-4" />,
};

export const scoreTitles: { [key: string]: string } = {
  technicalPatterns: "Technical Patterns",
  movingAverage: "Moving Average",
  relativeStrength: "Relative Strength",
  shortInterest: "Short Interest",
  sentiment: "News Sentiment",
  analystSentiment: "Analyst Sentiment",
  insiderActivity: "Insider Activity",
  earningsCatalyst: "Earnings Catalyst",
};

const getOverallRecommendation = (score: number): {
    recommendation: string,
    Icon: React.ElementType,
    color: string,
    description: string,
} => {
    if (score > 7) {
        return { recommendation: "Strong Buy", Icon: ArrowUp, color: "text-green-500", description: "All indicators suggest a strong upward potential." };
    }
    if (score > 5) {
        return { recommendation: "Buy", Icon: TrendingUp, color: "text-green-400", description: "Positive indicators outweigh the negative ones." };
    }
    if (score > 3) {
        return { recommendation: "Hold", Icon: Minus, color: "text-gray-500", description: "Indicators are mixed; caution is advised." };
    }
    if (score > 1) {
        return { recommendation: "Sell", Icon: TrendingDown, color: "text-red-400", description: "Negative indicators outweigh the positive ones." };
    }
    return { recommendation: "Strong Sell", Icon: ArrowDown, color: "text-red-500", description: "All indicators suggest a strong downward potential." };
}

export function AnalysisResults({ analysis, isLoading }: AnalysisResultsProps) {
  if (isLoading) {
    return <LoadingSkeleton />;
  }

  if (!analysis) {
    return (
      <div className="text-center py-16">
        <h2 className="font-headline text-2xl font-semibold">Ready for Analysis</h2>
        <p className="mt-2 text-muted-foreground">Enter a stock ticker above to begin.</p>
      </div>
    );
  }
  
  const overallScore = Object.values(analysis.scores).reduce((a, b) => a + b, 0) / Object.values(analysis.scores).length;
  const { recommendation, Icon, color, description } = getOverallRecommendation(overallScore);

  return (
    <div className="space-y-6">
       <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          <Card className="lg:col-span-1 shadow-md hover:shadow-lg transition-shadow duration-300">
            <CardHeader>
              <CardTitle>Final Insight</CardTitle>
              <CardDescription>Actionable recommendation for {analysis.ticker}</CardDescription>
            </CardHeader>
            <CardContent className="text-center flex flex-col items-center justify-center">
                <Icon className={`h-16 w-16 mb-2 ${color}`} />
                <p className={`font-bold text-2xl ${color}`}>{recommendation}</p>
                <p className="mt-2 text-muted-foreground text-sm">{description}</p>
            </CardContent>
          </Card>
          <Card className="lg:col-span-2 shadow-md hover:shadow-lg transition-shadow duration-300">
            <CardHeader>
              <CardTitle>AI-Powered Sentiment Analysis</CardTitle>
              <CardDescription>Generated by MarketMind's AI engine.</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-foreground italic">"{analysis.sentimentAnalysis.reasoning}"</p>
              <Accordion type="single" collapsible className="w-full mt-4">
                <AccordionItem value="item-1">
                  <AccordionTrigger>View Headline Sentiment Breakdown</AccordionTrigger>
                  <AccordionContent>
                    <ul className="space-y-2">
                        {analysis.sentimentAnalysis.headlines.map((headline, index) => {
                            const score = analysis.sentimentAnalysis.sentimentPolarityScores[index];
                            const badgeColor = score > 0.2 ? 'bg-green-500 hover:bg-green-600' : score < -0.2 ? 'bg-red-500 hover:bg-red-600' : 'bg-gray-500 hover:bg-gray-600';
                            return (
                                <li key={index} className="flex items-center justify-between text-sm p-2 rounded-md hover:bg-muted">
                                    <span>{headline}</span>
                                    <Badge className={badgeColor}>{score.toFixed(2)}</Badge>
                                </li>
                            );
                        })}
                    </ul>
                  </AccordionContent>
                </AccordionItem>
              </Accordion>
            </CardContent>
          </Card>
        </div>

      <Card>
        <CardHeader>
            <CardTitle>Detailed Analysis Breakdown</CardTitle>
            <CardDescription>Quantitative scores for each analysis factor.</CardDescription>
        </CardHeader>
        <CardContent>
            <AnalysisTable scores={analysis.scores} />
        </CardContent>
      </Card>
    </div>
  );
}


function LoadingSkeleton() {
  return (
    <div className="space-y-6">
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        <Card className="lg:col-span-1"><CardHeader><Skeleton className="h-6 w-3/4" /></CardHeader><CardContent><Skeleton className="h-24 w-24 rounded-full mx-auto" /><Skeleton className="h-6 w-1/2 mx-auto mt-4" /></CardContent></Card>
        <Card className="lg:col-span-2"><CardHeader><Skeleton className="h-6 w-3/4" /></CardHeader><CardContent><Skeleton className="h-4 w-full" /><Skeleton className="h-4 w-5/6 mt-2" /><Skeleton className="h-10 w-full mt-4" /></CardContent></Card>
      </div>
       <Card>
            <CardHeader>
                <Skeleton className="h-6 w-1/2" />
                <Skeleton className="h-4 w-3/4" />
            </CardHeader>
            <CardContent>
                <div className="space-y-4">
                    {[...Array(8)].map((_, i) => (
                        <div key={i} className="flex items-center">
                            <Skeleton className="h-5 w-5 rounded-full" />
                            <Skeleton className="h-4 w-1/3 ml-4" />
                            <Skeleton className="h-8 w-1/4 ml-auto" />
                        </div>
                    ))}
                </div>
            </CardContent>
        </Card>
    </div>
  );
}
